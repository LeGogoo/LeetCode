//DP
//因为要知道下一个数是多少，所以得记录最后2个数
//F(i,j)代表以下标i，j为结尾的2个数的最大长度
//如果之前存在F(x,i)使得 A[j]=A[x]+A[i]成立
//F(i,j) = max(F(x,i))+1;
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        size_t ASize = A.size();
        vector<vector<int>> memo(ASize, vector<int>(ASize, 0));
        int res = 0;
        for(size_t i = 0; i < ASize; i++){
            for(size_t j = i + 1; j < ASize; j++){
                memo[i][j] = 2;
            }
        }
        for(size_t i = 0; i < ASize; i++){
            for(size_t j = i + 1; j < ASize; j++){
                size_t lastJ = i;
                for(size_t x = 0; x < lastJ; x++){
                    if(A[x] + A[lastJ] == A[j])
                        memo[i][j] = max(memo[i][j], memo[x][lastJ] + 1);
                }
                res = max(res, memo[i][j]);
            }
        }
        if(res < 3)
            return 0;
        return res;
    }
};
//上面的方法超时了，尝试去优化一下找x的那部分
//用一个map<pair<j,y>,vector<int>>去存所有j为j，下一个数为y的 x的坐标
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        size_t ASize = A.size();
        vector<vector<int>> memo(ASize, vector<int>(ASize, 0));
        map<pair<size_t, int>,vector<size_t>> list;
        int res = 0;
        for(size_t i = 0; i < ASize; i++){
            for(size_t j = i + 1; j < ASize; j++){
                memo[i][j] = 2;
                list[make_pair(j, A[i] + A[j])].push_back(i);
            }
        }
        for(size_t i = 0; i < ASize; i++){
            for(size_t j = i + 1; j < ASize; j++){
                map<pair<size_t, int>,vector<size_t>>::iterator it;
                if((it = list.find(make_pair(i, A[j]))) != list.end()){
                    for(size_t y = 0; y < it->second.size(); y++){
                        size_t x = it->second[y];
                        memo[i][j] = max(memo[i][j], memo[x][i] + 1);
                        list[make_pair(j, A[i] + A[x])].push_back(i);
                    }
                    res = max(res, memo[i][j]);
                }
                
            }
        }
        if(res < 3)
            return 0;
        return res;
    }
};
//很遗憾，还是超时了，说明问题不在找x的地方？感觉很奇怪
//第二次优化
//用一个map<pair<j,y>,vector<int>>去存所有j为j，下一个数为y的 x的坐标,（存长度最长的，可能有多个）
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        size_t ASize = A.size();
        vector<vector<int>> memo(ASize, vector<int>(ASize, 0));
        map<pair<size_t, int>,vector<size_t>> list;
        int res = 0;
        for(size_t i = 0; i < ASize; i++){
            for(size_t j = i + 1; j < ASize; j++){
                memo[i][j] = 2;
                list[make_pair(j, A[i] + A[j])].push_back(i);
            }
        }
        for(size_t i = 0; i < ASize; i++){
            for(size_t j = i + 1; j < ASize; j++){
                map<pair<size_t, int>,vector<size_t>>::iterator it;
                if((it = list.find(make_pair(i, A[j]))) != list.end()){
                    for(size_t y = 0; y < it->second.size(); y++){
                        size_t x = it->second[y];
                        vector<size_t> *vec = &list[make_pair(j, A[i] + A[x])];
                        memo[i][j] = max(memo[i][j], memo[x][i] + 1);
                        if(!(*vec).empty()){
                            if(memo[x][i] > memo[(*vec).back()][i]){
                                (*vec).clear();
                                (*vec).push_back(i);
                            }
                            else if(memo[x][i] == memo[(*vec).back()][i])
                                (*vec).push_back(i);
                        }
                        else
                            (*vec).push_back(i);
                    }
                    res = max(res, memo[i][j]);
                }
            }
        }
        if(res < 3)
            return 0;
        return res;
    }
};
//还是超时了，去看看别人的思路。。
//之前确实是把这道题越做越复杂了
//没有注意到递增的正整数序列这句话的影响，不会有重复数值
//也就是说之前的代码对于：{1,3,1,2,4,9,20,7,3,11}这种情况是可以把 5（1,3,4,7,11）这种情况跑出来的
//但是其实没必要，此题根本就可以用贪心解
//遍历所有起点2个数的可能，每次贪心递推求最大解
//将所有值-索引 存进一个map
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        size_t ASize = A.size();
        unordered_map<size_t, size_t> valToIndex;
        for(size_t i = 0; i < ASize; i++)
            valToIndex[A[i]] = i;
        int res = 0;
        for(size_t i = 0; i < ASize - 1; i++)
            for(size_t j = i + 1; j < ASize; j++){
                int once = 2;
                size_t index1 = i;
                size_t index2 = j;
                unordered_map<size_t, size_t>::iterator it;
                while((it = valToIndex.find(A[index1]+A[index2])) != valToIndex.end()){
                    once++;
                    index1 = index2;
                    index2 = it->second;
                }
                if(once > 2)
                    res = max(res, once);
            }
        return res;
    }
};
//时间复杂度为O(N^2) 空间复杂度为O(N^2)
//LeetCode上耗时192ms beats68.24%的提交记录
