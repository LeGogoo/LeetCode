//简单题 注意1.2.3，1.2.3.0000.0.0.000 这种情况的处理
class Solution {
private:
    int frontNumber(const string& target, int &start){
        //返回最前面的版本号，当越界后返回-1 将start指向下一个数的起点index
        int res = 0;
        while(target[start] != '.' && start < (int)target.size()){
            res *= 10;
            res += target[start] - '0';
            start ++;
        }
        if(start == (int)target.size())
            start = -1;
        else
            start ++;//越过'.'
        return res;
    }
public:
    int compareVersion(string version1, string version2) {
        assert(!version1.empty() && !version2.empty());
        int ver1Index = 0;
        int ver2Index = 0;
        int ver1Number;
        int ver2Number;
        while(true){
            ver1Number = frontNumber(version1, ver1Index);
            ver2Number = frontNumber(version2, ver2Index);
            if(ver1Number != ver2Number) return ver1Number > ver2Number ? 1: -1;
            else if(ver1Index == -1 && ver2Index == -1)
                return 0;
            else if(ver1Index == -1){
                while(ver2Index != -1){
                    ver2Number = frontNumber(version2, ver2Index);
                    if(ver2Number != 0)
                        return -1;
                }
                return 0;
            }
            else if(ver2Index == -1){
                while(ver1Index != -1){
                    ver1Number = frontNumber(version1, ver1Index);
                    if(ver1Number != 0)
                        return 1;
                }
                return 0;
            }
        }
    }
};
//时间复杂度为O(N) N为两string里长的那个的size
//leetcode耗时0ms beats100%的提交记录
