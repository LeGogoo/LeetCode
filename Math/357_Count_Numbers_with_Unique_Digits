//一道简单的概率题
//如对于n=4:
//数可能是0,1位，2位，3位的
//0: 0 1种可能
//1位：1-9 9种可能
//2位：第一位9种可能（不能含0） 第二位9种可能（可以含0）9*9=81
//3位：第一位9种可能 第二位9种可能 第三位8种可能 9*9*8=648

class Solution {
public:
    int countNumbersWithUniqueDigits(int n) {
        int res = 1;
        for(int i = 1; i <= n; i++){
            int once = 9;
            for(int j = 1; j < i; j++){
                once *= 9 - j + 1;
            }
            res += once;
        }
        return res;
    }
};
//时间复杂度为O(N^2) 可以记录一下当前值，下次计算时只需乘上一个对应值如：3位=9*9*8 4位=9*9*8*7 多了个7
//可能就是这个原因将此题归到动态规划的吧 优化后的时间复杂度为O(N)
//leetcode耗时0ms beats100%的提交记录
