水题1：896. 单调数列
如果数组是单调递增或单调递减的，那么它是单调的。
如果对于所有 i <= j，A[i] <= A[j]，那么数组 A 是单调递增的。 如果对于所有 i <= j，A[i]> = A[j]，那么数组 A 是单调递减的。
当给定的数组 A 是单调数组时返回 true，否则返回 false。
//没啥好说的
class Solution {
public:
	bool isMonotonic(vector<int>& A) {
		int state = 0;//0未知，1增，-1减少
		int ASize = A.size();
		if (ASize == 0)
			return false;
		for (int i = 0; i < ASize - 1; i++) {
			if (A[i] == A[i + 1])
				continue;
			if (A[i] > A[i + 1]) {
				if (state == 0)
					state = -1;
				else if (state == 1)
					return false;
				continue;
			}
			if (A[i] < A[i + 1]) {
				if (state == 0)
					state = 1;
				else if (state == -1)
					return false;
				continue;
			}
		}
		return true;
	}
};

水题2：897. 递增顺序查找树
给定一个二叉树，重新排列树，使树中的最小值现在是树的根结点，并且每个结点没有左子结点，只有一个右子结点。
示例：
输入：[5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

输出：[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9
这道题的中文题述有误，没有说是二分搜索树，导致最开始我采用先序遍历再排序的方法wa了
按理说就算是我的方法也就是多耗时，不会wa，但是leetcode竟然有 small
                                                        /    \
                                                      big    null
这种二分搜索树作为样例，见识到了，在根据示例猜到原题意后，直接先序遍历后建树
class Solution {
private:
	vector<int> treeList;
	void PO(TreeNode* root) {
		if (root->left != NULL)
			PO(root->left);
		if (root != NULL)
			treeList.push_back(root->val);
		if (root->right != NULL)
			PO(root->right);
		return;
	}


public:
	TreeNode* increasingBST(TreeNode* root) {
		//先先序遍历树
		treeList.clear();
		PO(root);
		//接着建树
		TreeNode *newRoot = new TreeNode(0);//虚拟根
		TreeNode *nowRoot = newRoot;
		for (int i = 0; i < treeList.size(); i++) {
			nowRoot->right = new TreeNode(treeList[i]);
			nowRoot = nowRoot->right;
		}
		TreeNode *res = newRoot->right;
		free(newRoot);
		return res;
	}
};

第三题：898. 子数组按位或操作
我们有一个非负整数数组 A。
对于每个（连续的）子数组 B = [A[i], A[i+1], ..., A[j]] （ i <= j），我们对 B 中的每个元素进行按位或操作，获得结果 A[i] | A[i+1] | ... | A[j]。
返回可能结果的数量。 （多次出现的结果在最终答案中仅计算一次。）
示例：
输入：[1,1,2]
输出：3
解释：
可能的子数组为 [1]，[1]，[2]，[1, 1]，[1, 2]，[1, 1, 2]。
产生的结果为 1，1，2，1，3，3 。
有三个唯一值，所以答案是 3 。

//这道题可惜，做的时候思路错了，想预处理前i个或运算结果 再通过运算取出j-z的结果，但是确实无法做到，因为判断不了某一位上的1来自哪里
//之后，又想到从前向后预处理前i个或运算结果，再从后向前预处理，其实还是不行

//看了别人的解题思路，很巧妙，以后做这种连续子数组问题有了新的思路
//对于第i个数 我们需要知道 i-1 i-2...i-1 i-3...i-1 0...i-1
class Solution {
public:
	int subarrayBitwiseORs(vector<int>& a) {
		unordered_set<int> res,last;
		for (int i = 0; i < a.size(); i++) {
			unordered_set<int> now;
			now.insert(a[i]);
			for (auto j = last.begin(); j != last.end(); j++)
				now.insert(a[i] | *j);
			for (auto j = now.begin(); j != now.end(); j++)
				res.insert(*j);
			last = now;
		}
		return res.size();
	}
};
