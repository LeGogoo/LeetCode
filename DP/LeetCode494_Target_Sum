//F(i,j)表示考虑到第i个元素，目标值为j的个数(题目规定了j值最大为1000)
//F(i,j)=F(i-1,j-nums[i])+F(i-1,j+nums[i])

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int nS=(int)nums.size();
        if(nS==0)
            return 0;
        if(S>1000||S<-1000)
            return 0;
        vector<vector<int>>memo(nS+1,vector<int>(2001,0));//既然j最大值为1000，那么j的最小值为-1000
        //下标0代表-1000 下标1000代表0 下标2000代表1000
        memo[0][1000]=1;//什么都不选时和为0的情况
        for(int i=1;i<nums.size()+1;i++){
            for(int j=0;j<2001;j++){
                if(j-nums[i-1]>=0)
                    memo[i][j]+=memo[i-1][j-nums[i-1]];
                if(j+nums[i-1]<=2000)
                    memo[i][j]+=memo[i-1][j+nums[i-1]];
            }
        }
        return memo[nS][S+1000];
    }
};
//时间复杂度为执行次数为 2001*nums.size() 时间复杂度为O(S)S为元素个数，但是常数项为2001，实在太大了
//leetcode上用时52ms beats56.68%的提交记录
//优化思路为将每一次的结果存到一个queue中，下一次遍历queueu中的所有元素，用set保证不重复遍历，在针对元素较稀疏的情况非常有效
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int nS=(int)nums.size();
        if(nS==0)
            return 0;
        if(S>1000||S<-1000)
            return 0;
        queue<int> lastRes;
        vector<vector<int>>memo(nS+1,vector<int>(2001,0));//既然j最大值为1000，那么j的最小值为-1000
        unordered_set<int>isUsed;
        //下标0代表-1000 下标1000代表0 下标2000代表1000
        memo[0][1000]=1;//什么都不选时和为0的情况
        lastRes.push(1000);//(0)
        for(int i=1;i<nums.size()+1;i++){
            isUsed.clear();
            int lS=(int)lastRes.size();
            for(int j=0;j<lS;j++){
                int front=lastRes.front();
                if(isUsed.find(front)==isUsed.end())
                    isUsed.insert(front);
                else {
                    lastRes.pop();
                    continue;
                }
                if(front+nums[i-1]<=2000){
                    memo[i][front+nums[i-1]]+=memo[i-1][front];
                    lastRes.push(front+nums[i-1]);
                }
                if(front-nums[i-1]>=0){
                    memo[i][front-nums[i-1]]+=memo[i-1][front];
                    lastRes.push(front-nums[i-1]);
                }
                lastRes.pop();
            }
        }
        return memo[nS][S+1000];
    }
};
//很遗憾运行时间还是52ms。。。。。。。说明这对测试用例后面的大数据优化意义很小
//但是针对数据量不大的情况这个优化还是很有意义的
