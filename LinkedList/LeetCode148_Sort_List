//上次这道题出了点问题，这次补上了，感觉还是太复杂了写的，有时间再去优化一下
class Solution {
private:
    ListNode* mearge(ListNode* leftStart, ListNode* leftEnd, ListNode* rightStart, ListNode* rightEnd){
        ListNode* lastNext = rightEnd -> next;
        ListNode* leftCur = leftStart;
        ListNode* rightCur = rightStart;
        ListNode* nowCur;
        ListNode* res;
        if(leftCur->val < rightCur->val){
            res = leftCur;
            nowCur = leftCur;
            leftCur = leftCur -> next;
        }
        else{
            res = rightCur;
            nowCur = rightCur;
            rightCur = rightCur->next;
        }
        while(true){
            if(leftCur == leftEnd->next){
                nowCur->next = rightCur;
                break;
            }
            if(rightCur == rightEnd->next){
                nowCur->next = leftCur;
                leftEnd->next = lastNext;
                break;
            }
            if(leftCur->val < rightCur->val){
                nowCur->next = leftCur;
                nowCur = nowCur -> next;
                leftCur = leftCur->next;
            }
            else{
                nowCur->next = rightCur;
                nowCur = nowCur -> next;
                rightCur = rightCur->next;
            }
        }
        return res;
    }
    int getSize(ListNode* head){
        int res = 0;
        while(head != NULL){
            res++;
            head = head->next;
        }
        return res;
    }
public:
    ListNode* sortList(ListNode* head) {
        int add = 1;
        int headSize = getSize(head);
        ListNode *leftStart, *leftEnd, *rightStart, *rightEnd;
        ListNode *lastEnd;
        while(add <= headSize){
            bool sign = true;
            leftStart = leftEnd = rightStart = rightEnd = head;
            while(leftStart != NULL && leftEnd != NULL && rightStart != NULL && rightEnd != NULL){
                leftEnd = leftStart;
                for(int i = 1; i < add; i++){
                    leftEnd = leftEnd -> next;
                    if(leftEnd == NULL)
                        break;
                }
                if(leftEnd == NULL)
                    break;
                rightStart = leftEnd -> next;
                if(rightStart == NULL)
                    break;
                rightEnd = rightStart;
                for(int i = 1; i < add; i++){
                    if(rightEnd -> next == NULL)
                        break;
                    rightEnd = rightEnd -> next;
                }
                ListNode* nextLeftStart = rightEnd->next;
                if(sign)
                    head = mearge(leftStart, leftEnd, rightStart, rightEnd);
                else{
                    lastEnd->next =  mearge(leftStart, leftEnd, rightStart, rightEnd);
                }
                sign = false;
                leftStart = nextLeftStart;
                if(leftEnd->next == leftStart)
                    lastEnd = leftEnd;
                else
                    lastEnd = rightEnd;
            }
            add *= 2;
        }
        return head;
    }
};
//时间复杂度为O(NlogN) 空间复杂度为O(1)
//leetcode耗时40ms beats97.35%的提交记录
//bzw有人直接用sort()，太无耻了吧
