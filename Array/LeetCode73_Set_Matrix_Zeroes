//很漂亮的一道题，遍历行，找到不含0的行（找不到全矩阵制0）,
//然后把这一行作为记录行去记录含有0的列，最后先处理行（不处理记录行）再处理记录行中的列

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m = (int)matrix.size();
        if(m == 0)
            return;
        int n = (int)matrix[0].size();
        //先去找不含0的行
        int i,j;
        int findI = -1;
        for(i = 0;i < m;i++){
            for(j = 0;j < n;j++){
                if(matrix[i][j] == 0)
                    break;
            }
            if(j == n){
                findI = i;
                break;
            }
        }
        if(findI == -1){
            for(i = 0;i < m;i++)
                for(j = 0;j < n;j++)
                    matrix[i][j] = 0;
            return;
        }
        //已找到 行为findI
        for(j = 0;j < n;j++)
            for(i = 0;i < m;i++){
                if(matrix[i][j]==0){
                    matrix[findI][j] = 0;
                    break;
                }
            }
        //已记录完毕
        //先对除记录行以为的行处理0
        for(i = 0;i < m;i++){
            if(i == findI)
                continue;
            for(j = 0;j < n;j++){
                if(matrix[i][j]==0){
                    for(j = 0;j < n;j++)
                        matrix[i][j] = 0;
                    break;
                }
            }
        }
        //最后对记录行中的0 进行列处理
        for(j = 0;j < n;j++){
            if(matrix[findI][j]==0){
                for(i = 0;i < m;i++)
                    matrix[i][j] = 0;
            }
        }
    }
};
//时间复杂度为O(M*N) 空间复杂度为O(1)
//leetcode上耗时44ms beats99.66%的提交记录
