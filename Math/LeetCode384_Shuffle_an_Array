//洗牌算法，实现了一个最简单的洗牌算法
//每次从当前位及当前位后面的位中随机选一位来和当前位交换
class Solution {
private:
    vector<int> clear;
    vector<int> now;
public:
    Solution(vector<int> nums) {
        clear = now = nums;
        srand((unsigned)time(NULL));
    }
    
    /** Resets the array to its original configuration and return it. */
    vector<int> reset() {
        return clear;
    }
    
    /** Returns a random shuffling of the array. */
    vector<int> shuffle() {
        int nowSize = (int)now.size();
        for(int i = 0; i < nowSize; i++){
            //每个位置可以和自己及以后的位置交换
            int index = i + rand() % (nowSize - i);
            swap(now[i], now[index]);
        }
        return now;
    }
};
//时间复杂度为O(N) 空间复杂度为O(N)
//leetcode耗时192ms，beats90.02%的提交记录
