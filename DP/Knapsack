                   
                   memo[i][j]为考虑0-i号物品且容量为j时的最大价值
                   memo[i][j]=max(memo[i-1][j],memo[i-1][j-weight[i]]+value[i]) (需保证j-weight[i]>=0)
                   时间复杂度为O(C*N) C为背包容量，N为元素个数 空间复杂度也为O(C*N)
0-1背包问题：
                   优化主要是针对空间复杂度 由于在DP时实际使用的也只有这一层和上一层，也就是memo[i][]和memo[i-1][]这2层
                   将memo初始化为2层 观察可以发现，当前层为i%2,上一层为i+1%2,如遍历到1号元素时，当前层为memo[i%2][],上一层为memo[(i+1)%2][]
                   此时的时间复杂度不变，空间复杂度变为了O(C) 具体一点是2*C 这是极大的优化

                   空间复杂度还有优化的空间
                   观察可以发现当前层总是使用上一层的相同位置或是左边的位置:memo[i][j] 总是使用memo[i-1][j]和memo[i-1][<j]
                   故我们将memo初始化为1层 也就是直接把空间开销从2维的降到了1维，并且从右向左的遍历当前层，这样可以保证不覆盖掉后面要使用的值
                   而且这样做还可以达到提前终止循环的目的
                   此时的空间复杂度为O(C) 具体一点是C 
-----------------------------------------------------------------------------------------------------------------------------------
                   memo[j]为背包容量为j时的最大价值
                   将weight升序排序
                   memo[j]=max(memo[j-weight[x]]+value[x]) x属于0...(weight值小于j)的最大值 
                   时间复杂度为O(n^2)不理想
完全背包问题：                   
                   优化思路：使用之前背包问题的思路将
                   memo[i][j]定义为考虑0-i号物品且容量为j时的最大价值
                   memo[i][j]=max(memo[i-1][j],memo[i][j-weight[i]]+value[i]])
                   转移方程式的重点再................上面这个i上 由于此时每个物品都有无限个，所以放一个进背包还是再memo[i][]中
----------------------------------------------------------------------------------------------------------------------------------                   
                   最简单的思路是把每一种物品都分成一个一个的，然后列出来按照0-1背包问题去解
                   此时的时间复杂度为O(C*N*S) C为背包容量，N为物品个数,S为单一物品的最大个数 空间复杂度也是O(C*N*S)
                   其中空间复杂度可以按照0-1背包问题的优化思路优化到O(C)
多重背包问题：      
                   思路2 还是使用 memo[i][j]为考虑0-i号物品且容量为j时的最大价值 定义状态
                   memo[i][j]=max( memo[i-1][j](什么都不拿) , memo[i-1][j-K*weight[i]]+k*val[i] (k属于0...j/weight[i])
                   此时时间复杂度为O(C*N*K)C为背包容量，N为物品个数,K为单一物品的最大个数 同理空间复杂度可优化
                   
                   


                   

                   
                   
               
                   
                   
                   

                   
