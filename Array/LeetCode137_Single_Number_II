//通过亦或无法实现此题，但是还是用位运算的思路
//统计某一位上1出现的次数 当遍历完后，某一位上的1出现的次数不是3的倍数说明那个目标数的这一位为1
//因为int 32位所以执行次数为32*N 时间复杂度为O(N) 空间固定用一个int[32]数组，空间复杂度为O(1)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int bitTimes[32];//下标0上存最低位 下标31上存最高位
        memset(bitTimes, 0, sizeof(bitTimes));
        for(size_t i = 0; i < nums.size(); i++){
            int sign = 0x1;
            for(int bitIndex = 0; bitIndex < 32; bitIndex++){
                if((nums[i] & sign) == sign)
                    bitTimes[bitIndex]++;
                sign = sign << 1;
            }
        }
        int res = 0;
        int sign = 0x1;
        for(int i = 0; i < 32; i++){
            if(bitTimes[i] % 3 != 0)
                res = res | sign;
            sign = sign << 1;
        }
        return res;
    }
};
//时间复杂度为O(N) 空间复杂大为O(1)
//leetcode耗时12ms beats58.87%的提交记录
