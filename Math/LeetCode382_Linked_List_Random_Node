//通过题了解了蓄水池抽样，非常有意思的巧妙算法，可以在不知道具体个数的情况得到随机答案
//如一个链表长度为x 第一个节点选中的概率为1/x 可以表达为1/1 * 1/2 * 2/3 * 3/4 * 4/5 ... * x-1/x = 1/x
//                   第二个节点的概率为1/x 表达为         1/2 * 2/3 * 3/4 * 4/5 ... * x-1/x = 1/x
//                   第三个节点的概率为1/x 表达为               1/3 * 3/4 * 4/5 ... * x-1/x = 1/x
//                   ...
//                   第x个节点的概率为1/x 表达为                                        1/x =1/x
//下面代码里的 rand()%i 表达的就是1/i的概率
class Solution {
private:
    ListNode *head;
public:
    /** @param head The linked list's head.
     Note that the head is guaranteed to be not null, so it contains at least one node. */
    Solution(ListNode* head) {
        this->head = head;
    }
    
    /** Returns a random node's value. */
    int getRandom() {
        srand(time(NULL));
        ListNode *cur = head;
        assert(cur != NULL);
        int res = cur->val;
        for(int i = 1; cur != NULL; i++){
            if(rand() % i == 0)
                res = cur->val;
            cur = cur->next;
        }
        return res;
    }
};
//时间复杂度为O(N) 空间复杂度为O(1)
//leetcode上耗时36ms beats87.18%的提交记录
