//简单的二分搜索
//注意当找不到的时候返回应该插入的位置
class Solution {
private:
    int bs(vector<int>& nums, int target, int left, int right){
        //[left,right]
        if(left > right)
            return left;
        int mid = left + (right - left) / 2;
        if(target > nums[mid])
            return bs(nums, target, mid + 1, right);
        else if(target < nums[mid])
            return bs(nums, target, left, mid - 1);
        else //if(target == nums[mid])
            return mid;
    }
public:
    int searchInsert(vector<int>& nums, int target) {
        int numsSize = (int)nums.size();
        if(numsSize == 0)
            return 0;
        return bs(nums, target, 0, numsSize - 1);
    }
};
//leetcode耗时4ms,beats99.60%的提交记录
