//leetcode 922
//水题，判断奇偶的时候可以用位运算，挺酷的
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        int ASize = (int)A.size();
        int one = 1;
        int two = 0;
        vector<int> res(ASize, -1);
        for(int i = 0; i < ASize; i++){
            if((A[i] & 0x1) == 0x1){
                //奇数
                res[one] = A[i];
                one += 2;
            }
            else{
                res[two] = A[i];
                two += 2;
            }
        }
        return res;
    }
};
//leetcode 921
//水题，理清逻辑
class Solution {
public:
    int minAddToMakeValid(string S) {
        int SSize = (int)S.size();
        if(SSize == 0)
            return 0;
        int res = 0;
        int left = 0;
        for(int i = 0; i < SSize; i++){
            if(S[i] == '(')
                left++;
            else{
                if(left == 0)
                    res++;
                else
                    left--;
            }
        }
        res += left;
        return res;
    }
};
//leetcode 923
//用一个map来存值和出现的次数，把map值取到一个vector种排序
//先取2个数，可能就是2个数的分别次数（用map求，注意取一个会少一个）
//再算出第三个数看是否存在，存在的话计算次数
//注意最后应该根据一个数字重复了几次来除以对应值->2次处以2 3次处以6
class Solution {
#define mod 1000000007
public:
    int threeSumMulti(vector<int>& A, int target) {
        unordered_map<int, int>map1;//记录值和出现次数
        for(size_t i = 0; i < A.size(); i++)
            map1[A[i]]++;
        vector<int> list;
        int res = 0;
        for(auto it = map1.begin(); it != map1.end(); it++)
            list.push_back(it->first);
        sort(list.begin(), list.end());
        int listSize = (int)list.size();
        for(int i = 0; i < listSize; i++)
            for(int j = i; j < listSize; j++){
                int kVal = target - list[i] - list[j];
                if(kVal >= list[j] && map1.find(kVal) != map1.end()){
                    int less = 1;
                    if(list[i] == list[j] && list[j] == kVal)
                        less = 6;
                    else if(list[i] == list[j] || list[j] == kVal || list[i] == kVal)
                        less = 2;
                    auto itI = map1.find(list[i]);
                    auto itJ = map1.find(list[j]);
                    auto itK = map1.find(kVal);
                    long long add = itI->second;
                    add %= mod;
                    itI->second--;
                    if(itJ->second == 0){
                        itJ->second++;
                        continue;
                    }
                    add *= itJ->second;
                    add %= mod;
                    itJ->second--;
                    if(itK->second == 0){
                        itK -> second++;
                        continue;
                    }
                    add *= itK->second;
                    add /= less;
                    add %= mod;
                    itI->second++;
                    itJ->second++;
                    res += add;
                    res %= mod;
                }
            }
        return res;
    }
};
