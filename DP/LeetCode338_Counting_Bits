//优化二进制记1个数
//先随便找一个数：如11 二进制：0x1011 它的1个数为0x101的个数+1
//             如16 二进制：0x10000 它的1个数为0x1000的1的个数
//             将这个二进制数>>1 右移后的数的1的个数就是原数除最后一位的1的个数（最后一位在右移过程中被忽略了）
//再看最后一位 如果为1 那么结果+1，如果为0 结果不变，而右移也是一个缩小的操作（/2）
//F(i)为第i个数的1的个数
//F(i) == F(i>>1) + (i & 0x1)
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> memo(num + 1, 0);//0-nums num+1个数
        for(size_t i = 1; i < memo.size(); i++)
            memo[i] = memo[i >> 1] + (i & 0x1);
        return memo;
    }
};
//时间复杂度为O(N) 空间复杂度为O(N)
//leetcode上耗时58ms beats98.82%的提交记录
